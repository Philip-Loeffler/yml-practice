name: enviroment values
on: [push]
# testing env variables with/without context - the first run (echo $GITHUB_REF) is interpreted on the runner machine, because it is an env variable that lives on the runner machine when our file is sent
#   run: echo '${{ github.ref } is going to be evaluated by github actions before sent of to the runner machine

# you can define env variables on different level

env:
  WF_LEVEL_ENV: available to all jobs

jobs:
  env-vars-and-context:
    runs-on: ubuntu-latest
    # github actions processes this before sending to the runner machine
    if: github.ref == 'refs/heads/main'
    env:
      JOB_LEVEL_ENV: available to all steps in env-vars-and-context-job
    steps:
      - name: log env var
        run: echo $GITHUB_REF
      - name: log context
        run: echo '${{ github.ref }}'
        # doing this set env var will make it so the env variable will be available to any subsecquent steps
      - name: set env var
        run: |
          echo "NEW_ENV_VAR=$(date)" >> "GITHUB_ENV"
          echo "here is a joke: " >> $GITHUB_ENV"
          curl -s https://icanhazdadjoke.com/ >> $"GITHUB_ENV"
          echo "" >> "$GITHUB_ENV"
          echo "JOB_LEVEL_ENV=$RANDOM >> $GITHUB_ENV"
      - name: multline line env
        run: |
          DELIMETER=1234
          echo "RANDOM_JOKE<<DELIMITER" >> "GITHUB_ENV"
          echo "$DELIMITER" >> "$GITHUB_ENV"
      - name: log custom env vars
        env:
          STEP_LEVEL_ENV: availabe to only this sstep
          WF_LEVEL_ENV: overridden in step
        run: |
          echo '${{ env.STEP_LEVEL_ENV }}'
          echo $STEP_LEVEL_ENV
          echo $JOB_LEVEL_ENV
          echo $NEW_ENV_VAR
          echo $RANDOM_JOKE
